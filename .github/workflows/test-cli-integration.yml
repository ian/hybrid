name: Test CLI Integration

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/hybrid/**'
      - '.github/workflows/test-cli-integration.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/hybrid/**'
      - '.github/workflows/test-cli-integration.yml'

jobs:
  test-cli-integration:
    name: Test CLI with Real Dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          
      - name: Install dependencies and build
        run: |
          pnpm install --frozen-lockfile
          pnpm build

      - name: Create isolated test environment
        run: |
          mkdir -p /tmp/hybrid-cli-test
          cd /tmp/hybrid-cli-test

      - name: Generate project with CLI
        run: |
          cd /tmp/hybrid-cli-test
          # Set NODE_PATH to include the hybrid package dependencies
          export NODE_PATH="/home/runner/work/hybrid/hybrid/packages/hybrid/node_modules:$NODE_PATH"
          node /home/runner/work/hybrid/hybrid/packages/hybrid/dist/src/cli.js init integration-test

      - name: Verify project structure and files
        run: |
          cd /tmp/hybrid-cli-test/integration-test

          # Check all required files exist
          ls -la
          test -f package.json
          test -f README.md
          test -f .env
          test -f tsconfig.json
          test -f vitest.config.ts
          test -d src/
          test -f src/agent.ts
          test -f src/agent.test.ts

          # Verify package.json content
          grep '"name": "integration-test"' package.json
          grep '"type": "module"' package.json
          grep '"dev": "tsx --watch src/agent.ts"' package.json
          grep '"keys": "hybrid gen:keys"' package.json

          # Verify README has correct title
          grep '^# integration-test$' README.md

      - name: Generate keys
        run: |
          cd /tmp/hybrid-cli-test/integration-test
          # Set NODE_PATH to include the hybrid package dependencies
          export NODE_PATH="/home/runner/work/hybrid/hybrid/packages/hybrid/node_modules:$NODE_PATH"
          node /home/runner/work/hybrid/hybrid/packages/hybrid/dist/src/cli.js gen:keys

          # Verify keys were generated
          grep -v "your_wallet_key_here\|your_encryption_key_here" .env
          grep "WALLET_KEY=0x" .env
          grep "ENCRYPTION_KEY=" .env
          grep "public key is 0x" .env

      - name: Install project dependencies
        run: |
          cd /tmp/hybrid-cli-test/integration-test
          pnpm install

          # Verify node_modules was created
          test -d node_modules
          test -d node_modules/@openrouter
          test -d node_modules/hybrid

      - name: Test TypeScript compilation
        run: |
          cd /tmp/hybrid-cli-test/integration-test

          # This should work now that dependencies are installed
          npm run typecheck

          # Test actual build
          npm run build
          test -d dist/
          test -f dist/src/agent.js

      - name: Test linting and formatting
        run: |
          cd /tmp/hybrid-cli-test/integration-test

          # These should work (may have some warnings but shouldn't fail)
          npm run format:check || echo "Format check completed"
          npm run lint:check || echo "Lint check completed"

      - name: Test vitest configuration
        run: |
          cd /tmp/hybrid-cli-test/integration-test

          # Should be able to run vitest
          npx vitest --version
          npm test -- --run || echo "Tests completed (may fail without proper setup)"

      - name: Test dev server startup
        run: |
          cd /tmp/hybrid-cli-test/integration-test

          # Start dev server in background, wait a bit, then kill it
          timeout 10s npm run dev || echo "Dev server started successfully"

          # Check if any files were created (tsx might create cache)
          ls -la . 2>/dev/null || echo "Dev server test completed"

      - name: Test cleanup script
        run: |
          cd /tmp/hybrid-cli-test/integration-test

          # Should remove dist and node_modules
          npm run clean
          test ! -d dist/
          test ! -d node_modules/

      - name: Test with different project names
        run: |
          cd /tmp/hybrid-cli-test

          # Test with spaces and special characters
          export NODE_PATH="/home/runner/work/hybrid/hybrid/packages/hybrid/node_modules:$NODE_PATH"
          node /home/runner/work/hybrid/hybrid/packages/hybrid/dist/src/cli.js init "My Amazing Agent!"
          test -d my-amazing-agent
          grep '"name": "my-amazing-agent"' my-amazing-agent/package.json
          rm -rf my-amazing-agent

          # Test with hyphens
          node /home/runner/work/hybrid/hybrid/packages/hybrid/dist/src/cli.js init agent-with-dashes
          test -d agent-with-dashes
          grep '"name": "agent-with-dashes"' agent-with-dashes/package.json
          rm -rf agent-with-dashes

      - name: Test error cases
        run: |
          cd /tmp/hybrid-cli-test

          # Test creating project in existing directory
          mkdir existing-dir
          echo "existing content" > existing-dir/file.txt

          # This should fail
          export NODE_PATH="/home/runner/work/hybrid/hybrid/packages/hybrid/node_modules:$NODE_PATH"
          if node /home/runner/work/hybrid/hybrid/packages/hybrid/dist/src/cli.js init existing-dir 2>/dev/null; then
            echo "ERROR: Should have failed when directory is not empty"
            exit 1
          else
            echo "âœ… Correctly prevented overwriting existing directory"
          fi

          rm -rf existing-dir


