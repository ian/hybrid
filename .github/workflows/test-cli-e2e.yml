name: Test CLI End-to-End

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/hybrid/**'
      - '.github/workflows/test-cli-e2e.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/hybrid/**'
      - '.github/workflows/test-cli-e2e.yml'

jobs:
  test-cli-e2e:
    name: Test CLI End-to-End (Real World Scenario)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.5
          run_install: false

      - name: Install dependencies and build
        run: |
          pnpm install --frozen-lockfile
          pnpm build

      - name: Create isolated environment
        run: |
          mkdir -p /tmp/e2e-test
          cd /tmp/e2e-test

      - name: Simulate npm package installation
        run: |
          cd /tmp/e2e-test

          # Copy the built CLI as if it were installed via npm
          mkdir -p node_modules/.bin
          cp /home/runner/work/hybrid/hybrid/packages/hybrid/dist/src/cli.js node_modules/.bin/hybrid
          chmod +x node_modules/.bin/hybrid

          # Also create the 'hy' alias
          ln -s hybrid node_modules/.bin/hy

      - name: Test CLI as installed package
        run: |
          cd /tmp/e2e-test

          # Test both 'hybrid' and 'hy' commands
          ./node_modules/.bin/hybrid --help
          ./node_modules/.bin/hy --help

          # Test project creation
          ./node_modules/.bin/hybrid init e2e-test-project

      - name: Verify generated project
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Check all files exist
          test -f package.json
          test -f README.md
          test -f .env
          test -f tsconfig.json
          test -f vitest.config.ts
          test -d src/
          test -f src/agent.ts
          test -f src/agent.test.ts

          # Verify project name in package.json
          grep '"name": "e2e-test-project"' package.json

          # Verify README title
          grep '^# e2e-test-project$' README.md

      - name: Test key generation with installed CLI
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Use the installed CLI
          ../node_modules/.bin/hybrid gen:keys

          # Verify keys were generated
          grep "WALLET_KEY=0x" .env
          grep "ENCRYPTION_KEY=" .env

      - name: Test package.json scripts
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Verify all scripts exist
          node -e "
            const pkg = require('./package.json');
            const scripts = pkg.scripts;
            const expected = ['dev', 'build', 'start', 'keys', 'test', 'lint', 'format'];
            expected.forEach(script => {
              if (!scripts[script]) {
                console.error('Missing script:', script);
                process.exit(1);
              }
            });
            console.log('‚úÖ All scripts present');
          "

      - name: Test with mock OpenRouter API key
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Add a fake API key to test agent functionality
          sed -i 's/your_openrouter_api_key_here/mock-api-key-for-testing/' .env

          # Verify it was set
          grep 'mock-api-key-for-testing' .env

      - name: Test agent code structure
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Check that agent.ts has required imports and structure
          grep "import.*Agent.*hybrid" src/agent.ts
          grep "import.*createOpenRouter" src/agent.ts
          grep "agent.listen" src/agent.ts
          grep "process.env.PORT" src/agent.ts

          # Check test file structure
          grep "describe.*Agent" src/agent.test.ts
          grep "import.*vitest" src/agent.test.ts

      - name: Test TypeScript configuration
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Verify tsconfig.json structure
          node -e "
            const tsconfig = require('./tsconfig.json');
            if (!tsconfig.compilerOptions) {
              console.error('Missing compilerOptions');
              process.exit(1);
            }
            if (tsconfig.compilerOptions.target !== 'ES2020') {
              console.error('Wrong target:', tsconfig.compilerOptions.target);
              process.exit(1);
            }
            if (!tsconfig.include.includes('src/**/*')) {
              console.error('Wrong include pattern');
              process.exit(1);
            }
            console.log('‚úÖ TypeScript config is valid');
          "

      - name: Test vitest configuration
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Verify vitest config structure
          node -e "
            const vitestConfig = require('./vitest.config.ts');
            if (!vitestConfig.test) {
              console.error('Missing test config');
              process.exit(1);
            }
            if (vitestConfig.test.environment !== 'node') {
              console.error('Wrong environment:', vitestConfig.test.environment);
              process.exit(1);
            }
            console.log('‚úÖ Vitest config is valid');
          "

      - name: Test .gitignore content
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Check that important files are ignored
          grep "node_modules" .gitignore
          grep "\.env" .gitignore
          grep "dist" .gitignore
          grep "\.DS_Store" .gitignore

      - name: Test README completeness
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Check that README has important sections
          grep "## üöÄ Quick Start" README.md
          grep "## üìÅ Project Structure" README.md
          grep "## üõ†Ô∏è Available Scripts" README.md
          grep "## ü§ñ Agent Configuration" README.md
          grep "npm install" README.md
          grep "npm run dev" README.md

      - name: Test environment file structure
        run: |
          cd /tmp/e2e-test/e2e-test-project

          # Check .env file has all required variables
          grep "OPENROUTER_API_KEY=" .env
          grep "WALLET_KEY=" .env
          grep "ENCRYPTION_KEY=" .env
          grep "XMTP_ENV=" .env
          grep "PORT=" .env

      - name: Test project name sanitization
        run: |
          cd /tmp/e2e-test

          # Test various project names
          ../node_modules/.bin/hybrid init "Test Agent 123!"
          test -d test-agent-123
          grep '"name": "test-agent-123"' test-agent-123/package.json
          rm -rf test-agent-123

          # Test single character
          ../node_modules/.bin/hybrid init "A"
          test -d a
          grep '"name": "a"' a/package.json
          rm -rf a

      - name: Final integration test
        run: |
          cd /tmp/e2e-test

          # Create one final project and verify everything works together
          ./node_modules/.bin/hybrid init final-integration-test

          cd final-integration-test

          # Generate keys
          ../node_modules/.bin/hybrid gen:keys

          # Verify the complete setup
          test -f package.json
          test -f src/agent.ts
          test -d src/
          grep "WALLET_KEY=0x" .env
          grep "ENCRYPTION_KEY=" .env

          echo "üéâ CLI integration test completed successfully!"
          echo "Generated project: $(pwd)"
          echo "Files created:"
          ls -la


